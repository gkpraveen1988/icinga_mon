#!/bin/sh
#
# Author:  Jan Collijs
# Email:   jan.collijs@inuits.eu
# Date:    September 2012
# Purpose: Icinga-check to monitor a bacula service

PROGNAME=`basename $0`
PROGPATH=`echo $0 | sed -e 's,[\\/][^\\/][^\\/]*$,,'`
REVISION=`echo '$Revision: 1.00 $' | sed -e 's/[^0-9.]//g'`

. $PROGPATH/utils.sh

# Retrieving data from bacula related services
RUNNING_STATUS=`/etc/init.d/bacula-fd status`
UPDATE=`yum check-update | grep bacula | wc -l`
CONFIGFILE="/etc/bacula/bacula-fd.conf"
#BACKUP=`/usr/lib64/nagios/plugins/check_bacula-lastbackup -client\=BACULA-CLIENTNAME`

# Compiling the config file message
if [ -f $CONFIGFILE ];
then
   FILE="OK: Config file $CONFIGFILE is present"
   FSTATE=$STATE_OK
else
   FILE="CRITICAL Config file $CONFIGFILE does not exists"
   FSTATE=$STATE_CRITICAL
fi

# Compiling the updates message
if [ "$UPDATE" -gt 0 ]; then
  UPDATES="WARNING: $UPDATE updates available"
  USTATE=$STATE_WARNING
else
  UPDATES="OK: No updates available"
  USTATE=$STATE_OK
fi

# Compiling the service message
case "$RUNNING_STATUS" in
   *"running"*)
      SERVICE="OK: $RUNNING_STATUS"
      SSTATE=$STATE_OK
   ;;
   *"stopped"*)
      SERVICE="WARNING: $RUNNING_STATUS"
      SSTATE=$STATE_WARNING
   ;;
   *)
      SERVICE="CRITICAL: jenkins service is not running"
      SSTATE=$STATE_CRITICAL
   ;;
esac

# Compiling the backup status 
# (comment the declaration of $BACKUP when using the lastbackup script!)
BACKUP="OK"

case "$BACKUP" in
   *"OK"*)
      BSTATE=$STATE_OK
   ;;
   *"WARNING"*)
      BSTATE=$STATE_WARNING
   ;;
   *"CRITICAL"*)
      BSTATE=$STATE_CRITICAL
   ;;
   *"UNKNOWN"*)
      BSTATE=$STATE_UNKNOWN
   ;;
   *)
      BSTATE=$STATE_UNKNOWN
   ;;
esac

# Combing the multiple messages in 1 line and distributing it
#echo "$SERVICE / $UPDATES / $FILE / $BACKUP"
echo "$SERVICE / $UPDATES / $FILE"
	
# Retrieving the correct state for icinga and distributing it
if [ $SSTATE -lt 0 -o $SSTATE -gt 3 -o $USTATE -lt 0 -o $USTATE -gt 3 -o $FSTATE -lt 0 -o $FSTATE -gt 3 -o $BSTATE -lt 0 -o $BSTATE -gt 3 ]; then
  STATE=$STATE_UNKNOWN
  elif [ $SSTATE -eq 0 -a $USTATE -eq 0 -a $FSTATE -eq 0 -a $BSTATE -eq 0 ]; then
    STATE=$STATE_OK
elif [ $SSTATE -eq 1 -a $USTATE -eq 1 -a $FSTATE -eq 1 -a $BSTATE -eq 1 ]; then
    STATE=$STATE_WARNING
elif [ $SSTATE -eq 2 -a $USTATE -eq 2 -a $FSTATE -eq 2 -a $BSTATE -eq 2 ]; then
    STATE=$STATE_CRITICAL
elif [ $SSTATE -eq 3 -a $USTATE -eq 3 -a $FSTATE -eq 3 -a $BSTATE -eq 3 ]; then
    STATE=$STATE_UNKNOWN
elif [ $SSTATE -eq 3 -o $USTATE -eq 3 -o $FSTATE -eq 3 -o $BSTATE -eq 3 ]; then
    STATE=$STATE_UNKNOWN
elif [ $SSTATE -eq 2 -o $USTATE -eq 2 -o $FSTATE -eq 2 -o $BSTATE -eq 2 ]; then
    STATE=$STATE_CRITICAL
elif [ $SSTATE -eq 1 -o $USTATE -eq 1 -o $FSTATE -eq 1 -o $BSTATE -eq 1 ]; then
    STATE=$STATE_WARNING
elif [ $SSTATE -eq 0 -o $USTATE -eq 0 -o $FSTATE -eq 0 -o $BSTATE -eq 0 ]; then
    STATE=$STATE_OK
else
  STATE=$STATE_UNKNOWN
fi
exit $STATE
